snippet template_libfreenect_file_logger
	#include <fstream>
	#include <cstdlib>

	class Freenect2FileLogger: public libfreenect2::Logger {
	 public:
		Freenect2FileLogger(const char* filename) {
			if (filename)
				logfile_.open(filename);
			level_ = Debug;
		}

		bool good() {
			return logfile_.is_open() && logfile_.good();
		}

		void log(Level level, const std::string &message) override {
			logfile_ << "[" << libfreenect2::Logger::level2str(level) << "] " << message << std::endl;
		}

	 private:
		std::ofstream logfile_;
	};

	void SetFileLogger() {
		Freenect2FileLogger* file_logger = new Freenect2FileLogger(getenv("LOGFILE"));
		if (file_logger->good())
			libfreenect2::setGlobalLogger(file_logger);
		else
			delete filelogger;
	}
snippet libfreenect_include
	#include <libfreenect2/libfreenect2.hpp>
	#include <libfreenect2/frame_listener_impl.h>
	#include <libfreenect2/registration.h>
	#include <libfreenect2/packet_pipeline.h>
	#include <libfreenect2/logger.h>
snippet template_libfreenect
	#include <iostream>
	#include <signal.h>
	#include <cstdlib>

	#include <libfreenect2/libfreenect2.hpp>
	#include <libfreenect2/frame_listener_impl.h>
	#include <libfreenect2/registration.h>
	#include <libfreenect2/packet_pipeline.h>
	#include <libfreenect2/logger.h>

	int main(int argc, char** argv) {
		libfreenect2::setGlobalLogger(
			libfreenect2::createConsoleLogger(libfreenect2::Logger::Debug));

		libfreenect2::Freenect2 freenect2;
		libfreenect2::Freenect2Device* dev = nullptr;
		libfreenect2::PacketPipeline* pipeline = nullptr;

		pipeline = new libfreenect2::CpuPacketPipeline();
		// pipeline = new libfreenect2::OpenGLPacketPipeline();

		// int device_id = 0;
		// pipeline = new libfreenect2::OpenCLPacketPipeline(device_id);
		// pipeline = new libfreenect2::CudaPacketPipeline(device_id);

		// discover device
		if (freenect2.enumerateDevices() == 0) {
			std::cout << "no device connected!" << std::endl;
			return -1;
		}

		// open device
		std::string serial = freenect2.getDefaultDeviceSerialNumber();
		if (pipeline) {
			dev = freenect2.openDevice(serial, pipeline);
		} else {
			dev = freenect2.openDevice(serial);
		}

		if (dev == 0) {
			std::cout << "failure opening device!" << std::endl;
			return -1;
		}

		// listeners
		int types = 0;
		bool enable_rgb = true;
		bool enable_depth = true;
		if (enable_rgb) types |= libfreenect2::Frame::Color;
		if (enable_depth) types |= libfreenect2::Frame::Ir | libfreenect2::Frame::Depth;
		libfreenect2::SyncMultiFrameListener listener(types);
		libfreenect2::FrameMap frames;
		dev->setColorFrameListener(&listener);
		dev->setIrAndDepthFrameListener(&listener);

		// start device
		if (enable_rgb && enable_depth) {
			if (!dev->start()) return -1;
		} else {
			if (!dev->startStreams(enable_rgb, enable_depth)) return -1;
		}

		std::cout << "device serial: " << dev->getSerialNumber() << std::endl;
		std::cout << "device firmware: " << dev->getFirmwareVersion() << std::endl;

		// registration
		libfreenect2::Registration* registration =
			new libfreenect2::Registration(dev->getIrCameraParams(), dev->getColorCameraParams());
		libfreenect2::Frame undistorted(512, 424, 4), registered(512, 424, 4);

		// main loop
		unsigned long framecount = 0;
		while (true) {
			if (!listener.waitForNewFrame(frames, 10 * 1000)) {
				std::cout << "timeout!" << std::endl;
				return -1;
			}

			// frame data
			libfreenect2::Frame* rgb = frames[libfreenect2::Frame::Color];
			libfreenect2::Frame* ir = frames[libfreenect2::Frame::Ir];
			libfreenect2::Frame* depth = frames[libfreenect2::Frame::Depth];

			// registration
			if (enable_rgb && enable_depth) {
				registration->apply(rgb, depth, &undistorted, &registered);
			}

			// frame code here...

			listener.release(frames);
			/** libfreenect2::this_thread::sleep_for(libfreenect2::chrono::milliseconds(100)); */
		}

		dev->stop();
		dev->close();

		delete registration;
		return 0;
	}
