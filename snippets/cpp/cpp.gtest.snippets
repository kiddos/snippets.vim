snippet gtest_include
	#include <gtest/gtest.h>
snippet gtest_test_case
	TEST(${0:TestName}, ${1:Description}) {
		// test code...
	}
snippet gtest_template
	template <typename T>
	class ${1:TestName} : public ::testing::Test {
	 public:
		void ${2:TestCast}() {
			// test code
		}
	 int size_;
	};

	typedef ::testing::Types<${1:float, double}> TestTypes;
	TYPED_TEST_CASE($1, TestTypes);

	TYPED_TEST($1, $2) {
		this->size_ = 1;
		this->$2();
	}
snippet gtest_fixture
	class ${0:FixtureTest} : public ::testing::Test {
	 protected:
		$0() {}
		~$0() {}

		void SetUp() override {
			// setup
		}

		void TearDown() override {
			// delete
		}
	};

	TEST_F($0, ${1:TestName}) {
		// test code
	}
snippet gtest_main
	int main(int argc, char **argv) {
		::testing::InitGoogleTest(&argc, argv);
		return RUN_ALL_TESTS();
	}
snippet template_gtest
	#include <gtest/gtest.h>

	TEST(${0:TestName}, ${1:Description}) {
		// test code...
	}

	int main(int argc, char **argv) {
		::testing::InitGoogleTest(&argc, argv);
		return RUN_ALL_TESTS();
	}
snippet template_gtest_template
	template <typename T>
	class ${1:TestName} : public ::testing::Test {
	 public:
		void ${2:TestCast}() {
			// test code...
		}
	 int size_;
	};

	typedef ::testing::Types<${1:int, float, double}> TestTypes;
	TYPED_TEST_CASE($1, TestTypes);

	TYPED_TEST($1, $2) {
		this->size_ = 1;
		this->$2();
	}

	int main(int argc, char **argv) {
		::testing::InitGoogleTest(&argc, argv);
		return RUN_ALL_TESTS();
	}
snippet gtest_expect_equal
	EXPECT_EQ(${1:v1}, ${2:v2})
snippet gtest_expect_not_equal
	EXPECT_NE(${1:v1}, ${2:v2})
snippet gtest_expect_less_than
	EXPECT_LT(${1:v1}, ${2:v2})
snippet gtest_expect_less_or_equal
	EXPECT_LE(${1:v1}, ${2:v2})
snippet gtest_expect_greater_than
	EXPECT_GT(${1:v1}, ${2:v2})
snippet gtest_expect_greater_equal
	EXPECT_GE(${1:v1}, ${2:v2})
snippet gtest_assert_equal
	ASSERT_EQ(${1:v1}, ${2:v2})
snippet gtest_assert_not_equal
	ASSERT_NE(${1:v1}, ${2:v2})
snippet gtest_assert_less_than
	ASSERT_LT(${1:v1}, ${2:v2})
snippet gtest_assert_less_or_equal
	ASSERT_LE(${1:v1}, ${2:v2})
snippet gtest_assert_greater_than
	ASSERT_GT(${1:v1}, ${2:v2})
snippet gtest_assert_greater_equal
	ASSERT_GE(${1:v1}, ${2:v2})
