snippet pybind
	#include <pybind11/pybind11.h>

	namespace py = pybind11;

	PYBIND11_PLUGIN($1) {
		py::module m("${1:module_name}", "${2:docstring}");
		return m.ptr();
	}
snippet pybind_include
	#include <pybind11/pybind11.h>

	namespace py = pybind11;
snippet pybind_plugin
	PYBIND11_PLUGIN($1) {
		py::module m("${1:module_name}", "${2:docstring}");
		return m.ptr();
	}
snippet pybind_function
	m.def("${1:func}", &$1, "${2:docstring}");
snippet pybind_object
	py::class_<${1:Object}>(m, "$2")
		.def(py::init())
		// .def(py::init<const std::string&>())
		.def("${2:Function}", &$1::$2, "docstring");
snippet pybind_exception
	py::exception<${1:ExceptionClass}> except(m, "$1");
	py::register_exception_translator([](std::exception_ptr p) {
		try {
			if (p) std::rethrow_exception(p);
		} catch (const $1& e) {
			PyErr_SetString(PyExc_RuntimeError, e.what());
		}
	});
snippet template_pybind_example
	#include <pybind11/pybind11.h>

	int add(int i, int j) {
		return i + j;
	}

	namespace py = pybind11;

	PYBIND11_PLUGIN(example) {
		py::module m("example", "pybind11 example plugin");
		m.def("add", &add, "A function which adds two numbers");
		return m.ptr();
	}
