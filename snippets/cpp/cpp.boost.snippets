snippet boost_current_datetime
	boost::gregorian::date current(boost::gregorian::day_clock::local_day());
	std::stringstream ss;
	ss << current.year() << "/" << current.month() << "/" << current.day();
	std::string current_time = ss.str();
snippet boost_timer
	boost::timer::cpu_timer timer;
	// test code here...
	std::cout << timer.format() << '\n';
snippet boost_shared_ptr
	boost::shared_ptr<${1:int}> ${2:ptr}{new $1${0}};
snippet boost_unique_ptr
	boost::unique_ptr<${1:int}> ${2:ptr}{new $1${0}};
snippet boost_scope_ptr
	boost::scoped_ptr<${1:int}> ${2:ptr}{new $1${0}};
snippet boost_lexical cast
	${1:std::string} ${2:s} = boost::lexical_cast<$1>(${3:0});
## signals2
snippet boost_signals2_include
	#include <boost/signals2.hpp>
	#include <boost/bind.hpp>
	${0}
snippet boost_signals2_signal
	struct ${1:Functor} {
		void operator()() const {
			// signal code...
		}
	};

	boost::signals2::signal<void()> ${2:sig};
	$2.connect($1());
	$2();
##
## asio
snippet boost_asio
	boost::asio::io_service io_service;
snippet boost_asio_deadline_sync_timer
	boost::asio::deadline_timer ${1:timer}(io_service);
	$1.expires_from_now(boost::posix_time::seconds(1));
	$1.wait();
snippet boost_asio_system_sync_timer
	boost::asio::system_timer ${1:timer}(io_service);
	$1.expires_from_now(std::chrono::seconds(1));
	$1.wait();
snippet boost_asio steady_sync_timer
	boost::asio::steady_timer ${1:timer}(io_service);
	$1.expires_from_now(std::chrono::seconds(1));
	$1.wait();
snippet boost_asio_high_resolution_sync_timer
	boost::asio::high_resolution_timer ${1:timer}(io_service);
	$1.expires_from_now(std::chrono::seconds(1));
	$1.wait();
snippet boost_asio_deadline_async_timer
	boost::asio::deadline_timer ${1:timer}(io);
	$1.expires_from_now(boost::posix_time::seconds(1));
	$1.async_wait([](const boost::system::error_code&) {
		// code ...
	});
snippet boost_asio_system_async_timer
	boost::asio::system_timer ${1:timer}(io);
	$1.expires_from_now(std::chrono::seconds(1));
	$1.async_wait([](const boost::system::error_code&) {
		// code ...
	});
snippet boost_asio_steady_async_timer
	boost::asio::steady_timer ${1:timer}(io);
	$1.expires_from_now(std::chrono::seconds(1));
	$1.async_wait([](const boost::system::error_code&) {
		// code ...
	});
snippet boost_asio_high_resolution_async_timer
	boost::asio::high_resolution_timer ${1:timer}(io);
	$1.expires_from_now(std::chrono::seconds(1));
	$1.async_wait([](const boost::system::error_code&) {
		// code ...
	});
##
## bind
snippet boost_bind
	boost::bind(${1:funcion}, ${2:_1});
##
## mpi
snippet boost_mpi
	mpi::environment env;
	mpi::communicator world;
	int r = world.rank();
snippet boost_mpi_sync_send
	world.send(1, 0, ${1:msg});
snippet boost_mpi_sync recv
	world.recv(1, 1, ${1:msg});
snippet boost_mpi_async_send
	boost::mpi::request req = world.isend(1, 0, ${1:msg});
	boost::mpi::wait_all(req, req + 1);
snippet boost_mpi_async_recv
	boost::mpi::request req = world.irecv(1, 1, ${1:msg});
	boost::mpi::wait_all(req, req + 1);
##
## enable_shared_from_this
snippet boost_enabled_shared_from_this
	class ${1:Object} : public boost::enable_shared_from_this<$1> {
	 public:
		$1() {}
		boost::shared_ptr<$1> self() { return shared_from_this(); }
	};
##
## file system
snippet boost_file_size
	uintmax_t filesize = boost::filesystem::file_size(argv[1]);
snippet boost_file_exists
	boost::filesystem::path p{${1:filepath}};
	if (boost::filesystem::is_regular_file(p)) {
		// found
	} else {
		// not found
	}
snippet boost_directory_exists
	boost::filesystem::path p{${1:filepath};
	if (boost::filesystem::is_directory(p)) {
		// found
	} else {
		// not found
	}
snippet boost_iterate_directory
	boost::filesystem::path p{${1:path};
	if (boost::filesystem::is_directory(p)) {
		for (boost::filesystem::directory_entry& x :
				boost::filesystem::directory_iterator(p))
			// iterate
		}
	}
##
## log
snippet boost_log
	BOOST_LOG_TRIVIAL(${1:info}) << "${2:log message}";
snippet boost_log_filter
	boost::log::core::get()->set_filter(boost::log::trivial::severity >=
										boost::log::trivial::info);
snippet boost_log_file
	namespace logging = boost::log;
	namespace src = boost::log::sources;
	namespace sinks = boost::log::sinks;
	namespace keywords = boost::log::keywords;

	logging::add_file_log(keywords::file_name = "sample_%N.log",
							keywords::rotation_size = 10 * 1024 * 1024,
							keywords::time_based_rotation =
								sinks::file::rotation_at_time_point(0, 0, 0),
							keywords::format = "[%TimeStamp%]: %Message%");
##
## format
snippet boost_format
	boost::format("%1%") % "${1:string}"
## program options
snippet boost_program_options
	using namespace boost::program_options;
	options_description desc("${1:Description}");
	desc.add_options()("help,h", "${2:help messages}");

	variables_map vmap;
	store(parse_command_line(argc, argv, desc), vmap);
	notify(vmap);

	if (vmap.count("help")) {
		std::cout << desc << "\n";
		return 0;
	}
	${0}
snippet boost_program_options_add
	desc.add_options()("${1:option_name}",
		value<${2:int}>()->default_value(${3:0}), "${4:option help}");

	if (vmap.count("$1")) {
		$2 $1 = vmap["$1"].as<$2>();
		// code here...
	}
##
## serial port
snippet boost_serial_port
	#include <string>

	#include <boost/asio/serial_port.hpp>
	#include <boost/system/error_code.hpp>

	class SerialPort {
	 public:
		SerialPort(const std::string& device);
		SerialPort(const std::string& device, int baudrate);

		void Write(char c);
		void Write(const std::string& message);
		void WriteLine(const std::string& message);
		char Read();
		std::string Read(int size);
		void ReadLine(std::string& message);

		bool is_opened() const { return serial_port_.is_open(); }
		boost::system::error_code get_error_code() const { return error_code_; }

	 private:
		boost::asio::io_service io_service_;
		boost::asio::serial_port serial_port_;

		boost::system::error_code error_code_;
	};

	SerialPort::SerialPort(const std::string& device) : SerialPort(device, 9600) {}

	SerialPort::SerialPort(const std::string& device, int baudrate)
			: serial_port_(io_service_) {
		using boost::asio::serial_port_base;
		serial_port_.open(device);

		serial_port_.set_option(serial_port_base::baud_rate(baudrate));
		serial_port_.set_option(serial_port_base::character_size(8));
		serial_port_.set_option(
			serial_port_base::stop_bits(serial_port_base::stop_bits::one));
		serial_port_.set_option(
			serial_port_base::parity(serial_port_base::parity::none));
		serial_port_.set_option(
			serial_port_base::flow_control(serial_port_base::flow_control::none));
	}

	void SerialPort::Write(char c) {
		if (serial_port_.is_open())
			serial_port_.write_some(boost::asio::buffer(&c, 1), error_code_);
	}

	void SerialPort::Write(const std::string& message) {
		if (serial_port_.is_open()) {
			for (int i = 0; i < message.length(); ++i) Write(message[i]);
		}
	}

	void SerialPort::WriteLine(const std::string& message) {
		if (serial_port_.is_open()) {
			if (message.length() > 0 && message[message.length() - 1] == '\n') {
				Write(message);
			} else {
				Write(message + '\n');
			}
		}
	}

	char SerialPort::Read() {
		char c;
		if (serial_port_.is_open()) {
			serial_port_.read_some(boost::asio::buffer(&c, 1), error_code_);
		}
		return c;
	}

	std::string SerialPort::Read(int size) {
		std::string message;
		if (serial_port_.is_open()) {
			for (int i = 0; i < size; ++i) {
				message += Read();
			}
		}
		return message;
	}

	void SerialPort::ReadLine(std::string& message) {
		if (serial_port_.is_open()) {
			while (true) {
				char c = Read();
				message += c;
				if (c == '\n') break;
			}
		}
	}
