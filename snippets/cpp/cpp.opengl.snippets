## glfw
snippet glfw include
	#include <GL/glew.h>
	#include <GLFW/glfw3.h>
snippet glfw init
	if (!glfwInit()) {
		std::cerr << "ERROR: ${1:Fail to initialize glfw}\n";
	}

	${0}

	glfwTerminate();
snippet glfw errorcallback
	glfwSetErrorCallback([](int error, const char* desc) {
		std::cerr << "error code: " << error << " | " << desc << '\n';
	});
snippet glfw hints
	// set API version
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, ${1:3});
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, ${2:3});
snippet glfw window
	// glfw window
	GLFWwindow* ${1:window} = glfwCreateWindow(${2:640}, ${3:480}, "${4:Title}", nullptr, nullptr);
	if (!window) {
		std::cerr << "ERROR: ${5:Failt to open GLFW window}\n";
	}
	// set current context
	glfwMakeContextCurrent($1);

	// Ensure we can capture the escape key being pressed below
	glfwSetInputMode(window_, GLFW_STICKY_KEYS, GL_TRUE);

	${0}
	glfwDestroyWindow($1);
snippet glfw mainloop
	// main loop
	while (!glfwWindowShouldClose(${1:window})) {
		// get time
		double start_time = glfwGetTime();

		// get view port
		int width, height;
		glfwGetFramebufferSize(window, &width, &height);
		glViewport(0, 0, width, height);


		// clear buffer
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		${0}
		glfwSwapBuffers($1);
		glfwPollEvents();
		// if application needs to render after
		// input has been received
		// glfwWaitEvents();
		double passed  = glfwGetTime() - start_time;
		std::cout << '\rfps: ' << 1.0 / passed << std::flush;
	}
snippet glfw keyevent
	glfwSetKeyCallback(${1:window}, [](GLFWwindow* window, int key, int scancode,
			int action, int mods) {
		if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
			glfwSetWindowShouldClose(window, GL_TRUE);
		}
	});
snippet glfw example simple
	#include <GLFW/glfw3.h>
	#include <iostream>

	int main(void) {
		if (!glfwInit()) {
			std::cerr << "ERROR: Fail to initialize glfw\n";
		}

		glfwSetErrorCallback([](int error, const char* desc) {
			std::cerr << "error code: " << error << " | " << desc << '\n';
		});

		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 1);
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
		GLFWwindow* window = glfwCreateWindow(640, 480, "Title", nullptr, nullptr);
		if (!window) {
			std::cerr << "ERROR: Failt to open GLFW window\n";
		}
		glfwMakeContextCurrent(window);

		glfwSetKeyCallback(window, [](GLFWwindow* window, int key, int scancode,
			int action, int mods) {
			if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
				glfwSetWindowShouldClose(window, GL_TRUE);
			}
		});

		// main loop
		while (!glfwWindowShouldClose(window)) {
			// get time
			double start_time = glfwGetTime();

			// get view port
			int width, height;
			glfwGetFramebufferSize(window, &width, &height);
			glViewport(0, 0, width, height);


			// clear buffer
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

			glfwSwapBuffers(window);
			glfwPollEvents();
			// if application needs to render after
			// input has been received
			// glfwWaitEvents();
			double passed  = glfwGetTime() - start_time;
			std::cout << "\rfps: " << 1.0 / passed << std::flush;
		}

		glfwDestroyWindow(window);
		glfwTerminate();
		return 0;
	}
snippet glfw example class
	class GLWindow {
	 public:
		GLWindow();
		~GLWindow();
		bool Init();
		void MainLoop();

	 private:
		GLFWwindow* window_;
	};

	GLWindow::GLWindow() : window_(nullptr) {}

	bool GLWindow::Init() {
		// init glfw
		if (!glfwInit()) {
			std::cerr << "ERROR: Fail to initialize glfw\n";
			return false;
		}

		// create window
		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 1);
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
		window_ = glfwCreateWindow(640, 480, "Window", NULL, NULL);
		if (!window_) {
			glfwTerminate();
			return false;
		}

		// make current window context current
		glfwMakeContextCurrent(window_);
	}

	void GLWindow::MainLoop() {
		while (!glfwWindowShouldClose(window_)) {
			// clear color
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

			// render here...

			// swap buffer
			glfwSwapBuffers(window_);
			// event poll
			glfwPollEvents();
		}
	}

	GLWindow::~GLWindow() {
		if (window_) {
			glfwDestroyWindow(window_);
		}
		glfwTerminate();
	}
##
## glut
snippet glut include
	#include <GL/freeglut.h>
snippet glut function render
	static void Render() {
		glClear(GL_COLOR_BUFFER_BIT);
		glutSwapBuffers();
	}
snippet glut init
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowSize(${1:1024}, ${2:768});
	glutInitWindowPosition(${3:0}, ${4:0});
	glutCreateWindow("${5:Title}");

	glutDisplayFunc(${6:Render});
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glutMainLoop();
##
## glm
snippet glm include
	#include <glm/mat4x4.hpp>
snippet glm projection
	glm::mat4 ${1:projection} = glm::perspective(glm::radians(${2:45.0f}),
		${3:4.0f / 3.0f}, ${4:0.1f}, ${5:100.f});
snippet glm translate
	glm::mat4 ${1:translate} = glm::translate(${2:-1.0f}, ${3:0.0f}, ${4:0.0f});$0
