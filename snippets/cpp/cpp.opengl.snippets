## glfw
snippet glfw include
	#include <GL/glew.h>
	#include <GLFW/glfw3.h>
snippet glfw init
	if (!glfwInit()) {
		std::cerr << "ERROR: ${1:Fail to initialize glfw}\n";
	}

	${0}

	glfwTerminate();
snippet glfw errorcallback
	glfwSetErrorCallback([](int error, const char* desc) {
		std::cerr << "error code: " << error << " | " << desc << '\n';
	});
snippet glfw hints
	// set API version
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, ${1:3});
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, ${2:3});
snippet glfw window
	// glfw window
	GLFWwindow* ${1:window} = glfwCreateWindow(${2:1280}, ${3:1080}, "${4:Title}", nullptr, nullptr);
	if (!window) {
		std::cerr << "ERROR: ${5:Failt to open GLFW window}\n";
	}
	// set current context
	glfwMakeContextCurrent($1);

	${0}
	glfwDestroyWindow($1);
snippet glfw mainloop
	// main loop
	while (!glfwWindowShouldClose(${1:window})) {
		// get time
		double start_time = glfwGetTime();

		// get view port
		int width, height;
		glfwGetFramebufferSize(window, &width, &height);
		glViewport(0, 0, width, height);


		// clear buffer
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		${0}
		glfwSwapBuffers($1);
		glfwPollEvents();
		// if application needs to render after
		// input has been received
		// glfwWaitEvents();
		double passed  = glfwGetTime() - start_time;
		std::cout << '\rfps: ' << 1.0 / passed << std::flush;
	}
snippet glfw keyevent
	glfwSetKeyCallback(${1:window}, [](GLFWwindow* window, int key, int scancode,
			int action, int mods) {
		if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
			glfwSetWindowShouldClose(window, GL_TRUE);
		}
	});
