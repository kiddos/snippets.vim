snippet ros_include
	#include <ros/ros.h>
snippet ros_loop
	ros::Rate loop_rate(10);
	while (ros::ok()) {
		ros::spinOnce();
		loop_rate.sleep();
	}
snippet main_ros
	int main(int argc, char* argv[]) {
		ros::init(argc, argv, "{${1:node_name}}");
		return 0;
	}
snippet template_ros_publisher
	#include <ros/ros.h>
	#include <std_msgs/String.h>
	#include <sstream>

	class ${1:Publisher} {
	 public:
		$1();

		void Run();
	 private:
		ros::NodeHandle node_;
		ros::$1 pub_;
	};

	$1::$1() : pub_(node_.advertise<std_msgs::String>("${2:topic}", 1000)) {}

	void $1::Run() {
		ros::Rate loop_rate(30);
		while (ros::ok()) {
			std_msgs::String msg;
			std::stringstream ss;
			msg.data = ss.str();

			ROS_INFO("%s", msg.data.c_str());
			pub_.publish(msg);

			ros::spinOnce();
			loop_rate.sleep();
		}
	}

	int main(int argc, char* argv[]) {
		ros::init(argc, argv, "publisher");
		$1 pub;
		pub.Run();
		return 0;
	}
snippet ros_subscriber
	#include <ros/ros.h>
	#include <std_msgs/String.h>

	class ${1:Listener} {
	 public:
		$1();

		void Run();
		void Callback(const std_msgs::String::ConstPtr& msg);

	 private:
		ros::NodeHandle node_;
		ros::Subscriber sub_;
	};

	$1::$1() : sub_(node_.subscribe("${2:topic}", ${3:1000}, &$1::Callback, this)) {}
	void $1::Run() { ros::spin(); }

	void $1::Callback(const std_msgs::String::ConstPtr& msg) {
		ROS_INFO("[%s]", msg->data.c_str());
		${0}
	}

	int main(int argc, char** argv) {
		ros::init(argc, argv, "subscriber");
		$1 ${4:listener};
		$4.Run();
		return 0;
	}
snippet ros_client
	#include <ros/ros.h>
	#include <std_srvs/SetBool.h>

	class ${1:Client} {
	 public:
		$1();

		void Call();
		void Run();
	 private:
		ros::NodeHandle node_;
		ros::ServiceClient client_;
	};

	$1::$1() : client_(node_.serviceClient<std_srvs::SetBool>("${2:topic}")) {}

	void $1::Call() {
		std_srvs::SetBool srv;
		srv.request.data = true;
		if (client_.call(srv)) {
			ROS_INFO("[%d]", srv.response.success);
		} else {
			ROS_ERROR("Fail to call service");
		}
	}

	void $1::Run() {
		ros::Rate loop_rate(10);
		while (ros::ok()) {
			Call();
			ros::spinOnce();
			loop_rate.sleep();
		}
	}


	int main(int argc, char** argv) {
		ros::init(argc, argv, "client");

		$1 client;
		client.Call();
		client.Run();
		return 0;
	}
snippet template_ros_server
	#include <ros/ros.h>
	#include <std_srvs/SetBool.h>
	#include <thread>

	class $1 {
	 public:
		$1();

		bool Serve(std_srvs::SetBool::Request& req, std_srvs::SetBool::Response& res);
		void Run();
	 private:
		ros::NodeHandle node_;
		ros::ServiceServer service_;
	};

	$1::$1() : service_(node_.advertiseService("${2:topic}", &$1::Serve, this)) {}

	bool $1::Serve(std_srvs::SetBool::Request& req, std_srvs::SetBool::Response& res) {
		ROS_INFO("request: data=%d", req.data);
		return true;
	}

	void $1::Run () {
		ROS_INFO("Ready...");
		ros::spin();
	}

	int main(int argc, char** argv) {
		ros::init(argc, argv, "server");

		$1 server;
		server.Run();
		return 0;
	}
