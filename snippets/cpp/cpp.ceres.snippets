snippet ceres
	#include <ceres/ceres.h>

	using ceres::NumericDiffCostFunction;
	using ceres::CostFunction;
	using ceres::Problem;
	using ceres::Solver;
	using ceres::Solve;

	class CostFunctor {
	 public:
		CostFunctor(double k, int size) : k_(k), size_(size) {}

		template <typename T>
		bool operator()(const T* const x, T* err) const {
			// code here...
			return true;
		}

	 private:
		double k_;
		int size_;
	};

	template <typename T, int SIZE>
	void Solve(T* x, T target) {
		// setup problem
		Problem problem;

		Solver::Options options;
		options.linear_solver_type = ceres::DENSE_QR;
		// options.minimizer_progress_to_stdout = true;
		Solver::Summary summary;
		Solve(options, &problem, &summary);

		// std::cout << summary.BriefReport() << "\n";
		// for (int i = 0; i < SIZE; ++i) {
		//   std::cout << "x[" << i << "] = " << x[i] << '\n';
		// }
	}
snippet ceres_include
	#include <ceres/ceres.h>

	using ceres::AutoDiffCostFunction;
	using ceres::CostFunction;
	using ceres::Problem;
	using ceres::Solver;
	using ceres::Solve;
snippet ceres_autodiff_cost_function 
	double target = 0;
	CostFunction* ${2:cost_function} =
		new AutoDiffCostFunction<${1:CostFunctor}, 1, SIZE>(
			new CostFunctor(target, SIZE));
	problem.AddResidualBlock(cost_function, NULL, x);
snippet ceres_numeric_cost_function
	CostFunction* ${2:cost_function} =
		new NumericDiffCostFunction<${1:CostFunctor}, ceres::CENTRAL, 1, SIZE>(
			new CostFunctor(target, SIZE));
	problem.AddResidualBlock(cost_function, NULL, x);
snippet ceres_solver
	Solver::Options options;
	options.linear_solver_type = ceres::DENSE_QR;
	// options.minimizer_progress_to_stdout = true;
	Solver::Summary summary;
	Solve(options, &problem, &summary);
	// std::cout << summary.BriefReport() << "\n";
	// for (int i = 0; i < SIZE; ++i) {
	//   std::cout << "x[" << i << "] = " << x[i] << '\n';
	// }
snippet template_ceres_solver
	#include <ceres/ceres.h>
	#include "glog/logging.h"

	using ceres::AutoDiffCostFunction;
	using ceres::CostFunction;
	using ceres::Problem;
	using ceres::Solver;
	using ceres::Solve;
	// A templated cost functor that implements the residual r = 10 -
	// x. The method operator() is templated so that we can then use an
	// automatic differentiation wrapper around it to generate its
	// derivatives.
	struct CostFunctor {
		template <typename T> bool operator()(const T* const x, T* residual) const {
			residual[0] = 10.0 - x[0];
			return true;
		}
	};

	int main(int argc, char** argv) {
		google::InitGoogleLogging(argv[0]);
		// The variable to solve for with its initial value. It will be
		// mutated in place by the solver.
		double x = 0.5;
		const double initial_x = x;
		// Build the problem.
		Problem problem;
		// Set up the only cost function (also known as residual). This uses
		// auto-differentiation to obtain the derivative (jacobian).
		CostFunction* cost_function =
			new AutoDiffCostFunction<CostFunctor, 1, 1>(new CostFunctor);
		problem.AddResidualBlock(cost_function, NULL, &x);
		// Run the solver!
		Solver::Options options;
		options.minimizer_progress_to_stdout = true;
		Solver::Summary summary;
		Solve(options, &problem, &summary);
		std::cout << summary.BriefReport() << "\n";
		std::cout << "x : " << initial_x
					<< " -> " << x << "\n";
		return 0;
	}
