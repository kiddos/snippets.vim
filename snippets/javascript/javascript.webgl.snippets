snippet template_webgl_simple_triangle
	const canvas = document.getElementById('gl-canvas');
	var gl = canvas.getContext('webgl');

	if (!gl) {
		console.log('WebGL not supported');
		gl = canvas.getContext('experimental-webgl');
	}

	if (!gl) {
		alert('Your browser does not support WebGL');
	}

	const vertexShaderText = `
	precision mediump float;
	attribute vec2 vertexPosition;
	attribute vec3 vertexColor;
	varying vec3 fragColor;
	void main() {
	gl_Position = vec4(vertexPosition, 0.0, 1.0);
		fragColor = vertexColor;
	}
	`;

	const fragmentShaderText = `
	precision mediump float;
	varying vec3 fragColor;
	void main() {
		gl_FragColor = vec4(fragColor, 1.0);
	}
	`;

	var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	gl.shaderSource(vertexShader, vertexShaderText);
	gl.shaderSource(fragmentShader, fragmentShaderText);
	gl.compileShader(vertexShader);
	if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
		console.log(
			'ERROR: fail to compile vertex shader, ' +
			gl.getShaderInfoLog(vertexShader));
	}

	gl.compileShader(fragmentShader);
	if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
		console.log(
			'ERROR: fail to compile fragment shader, ' +
			gl.getShaderInfoLog(fragmentShader));
	}

	var program = gl.createProgram();
	gl.attachShader(program, vertexShader);
	gl.attachShader(program, fragmentShader);

	gl.linkProgram(program);
	if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
		console.log('ERROR: fail to link program, ' + gl.getProgramInfoLog(program));
	}

	gl.validateProgram(program);
	if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {
		console.log(
			'ERROR fail to validate program, ' + gl.getProgramInfoLog(program));
	}

	gl.clearColor(0, 0, 0, 1.0);
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	var vertices = [
		0.0, 0.5, 1.0, 1.0, 0.0,
		-0.5, -0.5, 1.0, 0.0, 1.0,
		0.5, -0.5, 0.0, 1.0, 1.0];
	var vbo = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

	var vertexAttribLocation = gl.getAttribLocation(program, 'vertexPosition');
	var colorAttribLocation = gl.getAttribLocation(program, 'vertexColor');

	gl.vertexAttribPointer(vertexAttribLocation, 2, gl.FLOAT, gl.FALSE,
		5 * Float32Array.BYTES_PER_ELEMENT, 0);
	gl.vertexAttribPointer(colorAttribLocation, 3, gl.FLOAT, gl.FALSE,
		5 * Float32Array.BYTES_PER_ELEMENT,
		2 * Float32Array.BYTES_PER_ELEMENT);

	gl.enableVertexAttribArray(vertexAttribLocation);
	gl.enableVertexAttribArray(colorAttribLocation);

	gl.useProgram(program);
	gl.drawArrays(gl.TRIANGLES, 0, 3);

	// var loop = function() {
	//   update();
	//   render();

	//   if (running) {
	//     requestAnimationFrame(loop);
	//   }
	// };

	// requestAnimationFrame(loop);
