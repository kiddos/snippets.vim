snippet #!
	#!/usr/bin/env node
# module exports
snippet module
	module.exports = ${1};
# EventEmitter
snippet template_event_emitter
	const EventEmitter = require('events');

	class Emitter extends EventEmitter {}

	const emitter = new Emitter();

	emitter.on('event', () => {
		console.log('an event occurred!');
	});

	// listener that is called at most once for a particular event
	emitter.once('event', () => {
		console.log(++m);
	});

	emitter.emit('event');
# http. User js function snippet as handler
snippet template_http_server
	const http = require('http');
	const net = require('net');
	const url = require('url');

	// Create an HTTP tunneling proxy
	const proxy = http.createServer((req, res) => {
		res.writeHead(200, { 'Content-Type': 'text/plain' });
		res.end('okay');
	});

	proxy.on('connect', (req, clientSocket, head) => {
		// connect to an origin server
		const serverUrl = url.parse(`http://${req.url}`);
		const serverSocket = net.connect(serverUrl.port, serverUrl.hostname, () => {
			clientSocket.write('HTTP/1.1 200 Connection Established\r\n' +
							'Proxy-agent: Node.js-Proxy\r\n' +
							'\r\n');
			serverSocket.write(head);
			serverSocket.pipe(clientSocket);
			clientSocket.pipe(serverSocket);
		});
	});

	// now that proxy is running
	proxy.listen(1337, '127.0.0.1', () => {
		// make a request to a tunneling proxy
		const options = {
			port: 1337,
			hostname: '127.0.0.1',
			method: 'CONNECT',
			path: 'www.google.com:80'
		};

		const req = http.request(options);
		req.end();

		req.on('connect', (res, socket, head) => {
			console.log('got connected!');

			// make a request over an HTTP tunnel
			socket.write('GET / HTTP/1.1\r\n' +
						'Host: www.google.com:80\r\n' +
						'Connection: close\r\n' +
						'\r\n');
			socket.on('data', (chunk) => {
				console.log(chunk.toString());
			});
			socket.on('end', () => {
				proxy.close();
			});
		});
	});
# net
snippet template_http_client
	const http = require('http');

	http.get('${1:http://nodejs.org/dist/index.json}', (res) => {
		const { statusCode } = res;
		const contentType = res.headers['content-type'];

		let error;
		if (statusCode !== 200) {
			error = new Error('Request Failed.\n' + `Status Code: ${statusCode}`);
		} else if (!/^application\/json/.test(contentType)) {
			error = new Error('Invalid content-type.\n' +
							`Expected application/json but received ${contentType}`);
		}
		if (error) {
			console.error(error.message);
			// consume response data to free up memory
			res.resume();
			return;
		}

		res.setEncoding('utf8');
		let rawData = '';

		res.on('data', (chunk) => {
			rawData += chunk;
		});

		res.on('end', () => {
			try {
				const parsedData = JSON.parse(rawData);
				console.log(parsedData);
			} catch (e) {
				console.error(e.message);
			}
		});
	}).on('error', (e) => {
		console.error(`Got error: ${e.message}`);
	});
snippet template_electron
	// Modules to control application life and create native browser window
	const {app, BrowserWindow} = require('electron');

	// Keep a global reference of the window object, if you don't, the window will
	// be closed automatically when the JavaScript object is garbage collected.
	let win;

	function createWindow() {
		// Create the browser window.
		win = new BrowserWindow({width: 800, height: 600});

		// and load the index.html of the app.
		win.loadFile('index.html');

		// Open the DevTools.
		// win.webContents.openDevTools();

		// Emitted when the window is closed.
		win.on('closed', function() {
			// Dereference the window object, usually you would store windows
			// in an array if your app supports multi windows, this is the time
			// when you should delete the corresponding element.
			win = null;
		});
	}

	// This method will be called when Electron has finished
	// initialization and is ready to create browser windows.
	// Some APIs can only be used after this event occurs.
	app.on('ready', createWindow);

	// Quit when all windows are closed.
	app.on('window-all-closed', function() {
		// On OS X it is common for applications and their menu bar
		// to stay active until the user quits explicitly with Cmd + Q
		if (process.platform !== 'darwin') {
			app.quit();
		}
	});

	app.on('activate', function() {
		// On OS X it's common to re-create a window in the app when the
		// dock icon is clicked and there are no other windows open.
		if (mainWindow === null) {
			createWindow();
		}
	});

	// In this file you can include the rest of your app's specific main process
	// code. You can also put them in separate files and require them here.
