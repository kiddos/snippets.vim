extends c
##
## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
# std::list
snippet list
	std::list<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
##
## Class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`} {
	 public:
		$1(${2});
		~$1();

	 private:
		${0:/* fields */}
	};
snippet cla
	class ${1:`vim_snippets#Filename('$1', 'name')`} {
	 public:
		$1(${2});
		~$1();

	 private:
		${0:/* fields */}
	};
snippet clas
	class ${1:`vim_snippets#Filename('$1', 'name')`} {
	 public:
		$1(${2});
		~$1();

	 private:
		${0:/* fields */}
	};
snippet class
	class ${1:`vim_snippets#Filename('$1', 'name')`} {
	 public:
		$1(${2});
		~$1();

	 private:
		${0:/* fields */}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
snippet readfile
	std::ifstream file("${1:inputFile.txt}", std::ios::in);
	std::string content;
	if (file.is_open()) {
		for (std::string line ; getline(file, line) ;)
		content += line + "\n";
		std::cout << content << std::endl;
		file.close();
	}
# namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
snippet nam
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
snippet name
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
snippet names
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
snippet namesp
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
snippet namespa
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
snippet namespac
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
snippet namespace
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* end of $1 namespace */
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
# std::cin
snippet cin
	std::cin >> ${1};
##
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}) {${3}}
# lambda (multi-line)
snippet lld
	[${1}](${2}) {
		${3}
	}
