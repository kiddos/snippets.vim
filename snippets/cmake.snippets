##
## Project
snippet project
	cmake_minimum_required(version ${1:2.8})
	project(${2:ProjectName})

	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
	set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
	set(CMAKE_CXX_FLAGS_RELEASE "-O3")

	add_subdirectory(src)
	enable_testing()
	add_subdirectory(test)
##
## Packages
snippet package boost
	## Boost
	find_package(Boost ${1:1.58.0} REQUIRED COMPONENTS system)
	if (Boost_FOUND)
		add_executable(${2:exec} $2.cc)
		include_directories(${Boost_INCLUDE_DIRS})
		target_link_libraries($2 ${Boost_LIBRARIES})
	endif ()
snippet package opencv3
	find_package(OpenCV REQUIRED COMPONENTS core highgui imgproc)
	if (OpenCV_FOUND)
		add_executable(${1:exec} $1.cc)
		target_link_libraries($1 ${OpenCV_LIBS})
	endif ()
snippet package protobuf
	find_package(Protobuf ${1:9.0.1} REQUIRED)
	include_directories(${PROTOBUF_INCLUDE_DIRS})

	if (PROTOBUF_FOUND)
		include_directories(${CMAKE_CURRENT_BINARY_DIR})
		PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS ${2:source.proto})
		add_executable(${1:source} $1.cc ${PROTO_SRCS} ${PROTO_HDRS})
		target_link_libraries($1 ${PROTOBUF_LIBRARIES})
	endif ()
snippet package swig
	## SWIG3
	find_package(SWIG REQUIRED)
	include(${SWIG_USE_FILE})

	find_package(PythonLibs 2.7 REQUIRED)
	include_directories(${PYTHON_INCLUDE_PATH})
	include_directories(${CMAKE_CURRNET_SOURCE_DIR})

	set(CMAKE_SWIG_FLAGS "")
	set_source_file_properties(module_name.i PROPERTIES CPLUSPLUS ON)
	swig_add_module(module_name python module_name.i ${SOURCE_FILES})
	swig_link_libraries(module_name ${PYTHON_LIBRARIES})
snippet package gtest
	find_package(GTest REQUIRED)
	include_directories(${GTEST_INCLUDE_DIRS})
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_INCLUDE_CURRENT_DIR on)

	if (TARGET ${2:target})
		set(TEST_LIBS ${GTEST_BOTH_LIBRARIES} pthread $2)
		add_executable(${1:test_target} $1.cpp)
		target_link_libraries($1 ${TEST_LIBS})
		add_test($1 $1)
	endif ()
snippet package pcl
	find_package(PCL REQUIRED)
	if (PCL_FOUND)
		include_directories(${PCL_INCLUDE_DIRS})
		link_directories(${PCL_LIBRARY_DIRS})
		add_definitions(${PCL_DEFINITIONS})

		add_executable(${1:exec}  $1.cc)
		target_link_libraries($1 ${PCL_LIBRARIES})
	endif ()
snippet package blas
	find_package(BLAS REQUIRED)
	if (BLAS_FOUND)
		add_executable(${1:exec}  $1.cc)
		target_link_libraries($1 ${BLAS_LIBRARIES})
	endif ()
snippet package eigen
	find_package(Eigen3 REQUIRED)
		if (Eigen3_FOUND)
		include_directories(${EIGEN3_INCLUDE_DIR})

		add_executable(${1:exec}  $1.cc)
	endif ()
snippet package qtwidget
	find_package(Qt5Widgets)
	if (Qt5Widgets_FOUND)
		message(STATUS "QtWidget Version: ${Qt5Widgets_VERSION}")

		add_executable(${1:exec}  $1.cc)
		target_link_libraries($1 Qt5::Widgets)
	endif ()
snippet package opengl
	find_package(OpenGL REQUIRED)
	find_package(GLEW REQUIRED)
	if (OPENGL_FOUND AND OPENGL_GLU_FOUND AND GLEW_FOUND)
		include_directories(${OPENGL_INCLUDE_DIR} ${GLEW_INCLUDE_DIRS})

		add_executable(${1:exec}  $1.cc)
		target_link_libraries($1 ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES})
	endif ()
snippet package armadillo
	find_package(Armadillo)
	if (ARMADILLO_FOUND)
		include_directories(${ARMADILLO_INCLUDE_DIRS})
		message(STATUS "Armadillo Library Version: ${ARMADILLO_VERSION_STRING}")

		add_executable(${1:exec}  $1.cc)
		target_link_libraries($1 ${ARMADILLO_LIBRARIES})
	endif ()
snippet package pybind11
	find_package(pybind11 REQUIRED)
	set(PYBIND11_CPP_STANDARD -std=c++11)

	if (PYTHONLIBS_FOUND)
		if (PYTHON_IS_DEBUG)
			message(STATUS "${PYTHON_LIBRARIES} is debug")
		endif ()
		pybind11_add_module(example2 test_pybind/bind.cc)
	endif ()
snippet library benchmark
	find_library(BENCHMARK_LIBRARIES benchmark)
	if (BENCHMARK_LIBRARIES)
		message(STATUS "Using Google Benchmark ${BENCHMARK_LIBRARIES}")
		add_executable(${1:exec}  $1.cc)
		target_link_libraries($1 ${BENCHMARK_LIBRARIES})
	endif ()
##
## Expernal project
snippet external gtest
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
		URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}
		URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}
		SOURCE_DIR "${4:${CMAKE_BINARY_DIR}/gtest-src}"
		BINARY_DIR "${0:${CMAKE_BINARY_DIR}/gtest-build}"
		CONFIGURE_COMMAND ""
		BUILD_COMMAND     ""
		INSTALL_COMMAND   ""
		TEST_COMMAND      ""
	)
##
## Download
snippet download numpy.i
	if (NOT EXISTS ./numpy.i)
		message(STATUS "Downloading numpy.i from github.com...")
		file(DOWNLOAD
			https://raw.githubusercontent.com/numpy/numpy/master/tools/swig/numpy.i
			./numpy.i EXPECTED_MD5 7ace9cd48149759e03624dae78cf2216 SHOW_PROGRESS)
	endif ()
