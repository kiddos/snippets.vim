##
## Project
snippet project
	cmake_minimum_required(version ${1:2.8})
	project(${2:ProjectName})

	set(CMAKE_CXX_STANDARD ${3:11})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
	set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
	set(CMAKE_CXX_FLAGS_RELEASE "-O3")
	set(BUILD_SHARED_LIBS ON)

	if (NOT CMAKE_BUILD_TYPE)
		set(CMAKE_BUILD_TYPE Debug)
	endif ()

	add_subdirectory(src)
	enable_testing()
	add_subdirectory(test)
##
## Packages
snippet package boost
	## Boost
	find_package(Boost ${1:1.58.0} COMPONENTS ${2:system})
	if (Boost_FOUND)
		include_directories(${Boost_INCLUDE_DIRS})
		link_libraries(${Boost_LIBRARIES})
	endif ()
snippet package opencv2
	find_package(OpenCV ${1:2.4} EXACT COMPONENTS ${2:core highgui imgproc})
	if (OpenCV_FOUND)
		message(STATUS "using OpenCV 2.4")
		link_libraries(${OpenCV_LIBS})
	endif ()
snippet package opencv3
	find_package(OpenCV ${1:3.0} COMPONENTS ${2:core highgui imgproc})
	if (OpenCV_FOUND)
		message(STATUS "using OpenCV")
		link_libraries(${OpenCV_LIBS})
	endif ()
snippet package protobuf
	find_package(Protobuf ${1:9.0.1})
	if (PROTOBUF_FOUND)
		include_directories(${PROTOBUF_INCLUDE_DIRS})
		include_directories(${CMAKE_CURRENT_BINARY_DIR})
		PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS ${2:source.proto})
		link_libraries(${PROTOBUF_LIBRARIES})
	endif ()
snippet package swig
	## SWIG3
	find_package(SWIG)
	find_package(PythonLibs ${1:2.7} EXACT)

	if (SWIG_FOUND AND PYTHONLIBS_FOUND)
		message(STATUS "Using PythonLibs ${PYTHONLIBS_VERSION_STRING}")
		include(${SWIG_USE_FILE})
		include_directories(${PYTHON_INCLUDE_DIR})
		include_directories(${CMAKE_CURRNET_SOURCE_DIR})

		set(CMAKE_SWIG_FLAGS "")
		set_source_file_properties(${2:module_name}.i PROPERTIES CPLUSPLUS ON)
		swig_add_module($2 python $2.i ${SOURCE_FILES})
		swig_link_libraries($2 ${PYTHON_LIBRARY})
	endif ()
snippet package gtest
	find_package(GTest)
	if (GTEST_FOUND)
		include_directories(${GTEST_INCLUDE_DIRS})
		link_libraries(${GTEST_BOTH_LIBRARIES})
		set(TEST_LIBS ${GTEST_BOTH_LIBRARIES} pthread)
	endif ()
snippet package pcl
	find_package(PCL)
	if (PCL_FOUND)
		include_directories(${PCL_INCLUDE_DIRS})
		link_directories(${PCL_LIBRARY_DIRS})
		link_libraries($1 ${PCL_LIBRARIES})
		add_definitions(${PCL_DEFINITIONS})
	endif ()
snippet package blas
	find_package(BLAS REQUIRED)
	if (BLAS_FOUND)
		link_libraries(${BLAS_LIBRARIES})
	endif ()
snippet package eigen
	find_package(Eigen3 REQUIRED)
		if (Eigen3_FOUND)
		include_directories(${EIGEN3_INCLUDE_DIR})
	endif ()
snippet package qtwidget
	find_package(Qt5Widgets)
	if (Qt5Widgets_FOUND)
		message(STATUS "QtWidget Version: ${Qt5Widgets_VERSION}")
		link_libraries($1 Qt5::Widgets)
	endif ()
snippet package opengl
	find_package(OpenGL)
	find_package(GLEW)
	if (OPENGL_FOUND AND OPENGL_GLU_FOUND AND GLEW_FOUND)
		include_directories(${OPENGL_INCLUDE_DIR} ${GLEW_INCLUDE_DIRS})
		link_libraries(${OPENGL_LIBRARIES} ${GLEW_LIBRARIES})
	endif ()
snippet package armadillo
	find_package(Armadillo)
	if (ARMADILLO_FOUND)
		include_directories(${ARMADILLO_INCLUDE_DIRS})
		message(STATUS "Armadillo Library Version: ${ARMADILLO_VERSION_STRING}")
		link_libraries(${ARMADILLO_LIBRARIES})
	endif ()
snippet package pybind11
	find_package(pybind11)
	set(PYBIND11_CPP_STANDARD -std=c++11)

	if (PYTHONLIBS_FOUND)
		if (PYTHON_IS_DEBUG)
			message(STATUS "${PYTHON_LIBRARIES} is debug")
		endif ()
		pybind11_add_module(example2 test_pybind/bind.cc)
	endif ()
snippet package mpi
	find_package(MPI)
	if (MPI_FOUND)
		include_directories(${MPI_INCLUDE_PATH})
		link_libraries(${MPI_LIBRARIES})
	endif ()
snippet library benchmark
	find_library(BENCHMARK_LIBRARIES benchmark)
	if (BENCHMARK_LIBRARIES)
		message(STATUS "Using Google Benchmark ${BENCHMARK_LIBRARIES}")
		add_executable(${1:exec}  $1.cc)
		target_link_libraries($1 ${BENCHMARK_LIBRARIES})
	endif ()
##
## target
snippet add test
	add_executable(${1:test_target} $1.cc)
	target_link_libraries($1 ${TEST_LIBS})
	add_test($1 $1)
##
## Expernal project
snippet external gtest
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
		URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}
		URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}
		SOURCE_DIR "${4:${CMAKE_BINARY_DIR}/gtest-src}"
		BINARY_DIR "${0:${CMAKE_BINARY_DIR}/gtest-build}"
		CONFIGURE_COMMAND ""
		BUILD_COMMAND     ""
		INSTALL_COMMAND   ""
		TEST_COMMAND      ""
	)
##
## Download
snippet download numpy.i
	if (NOT EXISTS ./numpy.i)
		message(STATUS "Downloading numpy.i from github.com...")
		file(DOWNLOAD
			https://raw.githubusercontent.com/numpy/numpy/master/tools/swig/numpy.i
			./numpy.i EXPECTED_MD5 7ace9cd48149759e03624dae78cf2216 SHOW_PROGRESS)
	endif ()
