## IO
# pinMode OUTPUT
snippet pinout
	pinMode(${1}, OUTPUT);
# pinMode INPUT
snippet pinin
	pinMode(${1}, INPUT);
# digitalWrite HIGH
snippet dwHigh
	digitalWrite(${1}, HIGH);
# digitalWrite LOW
snippet dwLow
	digitalWrite(${1}, LOW);
# digitalRead
snippet dr
	digitalRead(${1});
# serialRead
snippet sr
	serialRead();
# serial.println
snippet sp
	serial.println(${1});
# delay
snippet dl
	delay(${1});
snippet template empty
	void Init() {
		// normal timer
		TCCR1A = _BV(WGM10);
		TCCR1B = _BV(CS11) | _BV(CS10) | _BV(WGM12);
		TCCR2A = _BV(WGM21) | _BV(WGM20);
		TCCR2B = _BV(CS22);
	}

	void setup() {
		Init();
		${1:// setup code}
	}

	void loop() {
		// loop
	}
snippet TimerDescription
	/**
	 ** Waveform Generation Mode
	 ** Mode WGM13 WGM12(CTC) WGM11(PWM11) WGM10(PWM10) Mode Operation                   TOP    Update of OCR1x at TOV1 Flag Set on
	 ** 0    0     0          0            0            Normal                           0xFFFF Immediate          MAX
	 ** 1    0     0          0            1            PWM, Phase Correct, 8-bit        0x00FF TOP                BOTTOM
	 ** 2    0     0          1            0            PWM, Phase Correct, 9-bit        0x01FF TOP                BOTTOM
	 ** 3    0     0          1            1            PWM, Phase Correct, 10-bit       0x03FF TOP                BOTTOM
	 ** 4    0     1          0            0            CTC                              OCR1A  Immediate          MAX
	 ** 5    0     1          0            1            Fast PWM, 8-bit                  0x00FF BOTTOM             TOP
	 ** 6    0     1          1            0            Fast PWM, 9-bit                  0x01FF BOTTOM             TOP
	 ** 7    0     1          1            1            Fast PWM, 10-bit                 0x03FF BOTTOM             TOP
	 ** 8    1     0          0            0            PWM, Phase and Frequency Correct ICR1   BOTTOM             BOTTOM
	 ** 9    1     0          0            1            PWM, Phase and Frequency Correct OCR1A  BOTTOM             BOTTOM
	 ** 10   1     0          1            0            PWM, Phase Correct               ICR1   TOP                BOTTOM
	 ** 11   1     0          1            1            PWM, Phase Correct               OCR1A  TOP                BOTTOM
	 ** 12   1     1          0            0            CTC                              ICR1   Immediate          MAX
	 ** 13   1     1          0            1            Reserved                         -      -                  -
	 ** 14   1     1          1            0            Fast PWM                         ICR1   BOTTOM             TOP
	 ** 15   1     1          1            1            Fast PWM                         OCR1A  BOTTOM             TOP
	 **/

	/**
	 ** Compare Output Mode, non-PWM
	 ** COM1A1/COM1B1 COM1A0/COM1B0 Description
	 ** 0             0             Normal port operation, OC1A/OC1B disconnected.
	 ** 0             1             Toggle OC1A/OC1B on Compare Match.
	 ** 1             0             Clear OC1A/OC1B on Compare Match (Set output to low level).
	 ** 1             1             Set OC1A/OC1B on Compare Match (Set output to high level).
	 **/

	/**
	 ** Compare Output Mode, Fast PWM
	 ** COM1A1/COM1B1 COM1A0/COM1B0 Description
	 ** 0             0             Normal port operation, OC1A/OC1B disconnected.
	 ** 0             1             WGM1[3:0] = 14 or 15: Toggle OC1A on Compare Match, OC1B
	 **                             disconnected (normal port operation). For all other WGM1 settings,
	 **                             normal port operation, OC1A/OC1B disconnected.
	 ** 1             0             Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at
	 **                             BOTTOM (non-inverting mode)
	 ** 1             1             Set OC1A/OC1B on Compare Match, clear OC1A/OC1B at
	 **                             BOTTOM (inverting mode)
	 **/

	/**
	 ** Compare Output Mode, Phase Correct and Phase and Frequency Correct PWM
	 ** COM1A1/COM1B1 COM1A0/COM1B0 Description
	 ** 0             0             Normal port operation, OC1A/OC1B disconnected.
	 ** 0             1             WGM1[3:0] = 9 or 11: Toggle OC1A on Compare Match, OC1B
	 **                             disconnected (normal port operation). For all other WGM1 settings,
	 **                             normal port operation, OC1A/OC1B disconnected.
	 ** 1             0             Clear OC1A/OC1B on Compare Match when up-counting. Set
	 **                             OC1A/OC1B on Compare Match when down-counting.
	 ** 1             1             Set OC1A/OC1B on Compare Match when up-counting. Clear
	 **                             OC1A/OC1B on Compare Match when down-counting.
	 **/

	/**
	 ** CS12 CS11 CS10  Description
	 ** 0    0    0     No clock source (Timer/Counter stopped).
	 ** 0         1     clk I/O /1 (No prescaling)
	 ** 0    1    0     clk I/O /8 (From prescaler)
	 ** 0    1    1     clk I/O /64 (From prescaler)
	 ** 1    0    0     clkI/O/256 (From prescaler)
	 ** 1    0    1     clk I/O /1024 (From prescaler)
	 ** 1    1    0     External clock source on T1 pin. Clock on falling edge.
	 ** 1    1    1     External clock source on T1 pin. Clock on rising edge.
	 **/

	/** ICIE: Input Capture Interrupt Enable */
	/** OCIEA: Output Compare A Match Interrupt Enable */
	/** OCIEB: Output Compare B Match Interrupt Enable */
	/** TOIE: Overflow Interrupt Enable */
	/** tick time: 65535 / (16MHz / prescalar) */
snippet TimerNormal
	void TimerNormal() {
		noInterrupts();

		TCCR1A = 0;  // timer/counter control register A
		TCCR1B = 0;  // timer/counter control register B
		TCCR1B |= (1 << CS12);
		TIMSK1 |= (1 << TOIE1); // timer interrupt mask register
		TCNT1 = 65535 - 16000000 / 256; // timer counter value

		interrupts();
	}

	ISR(TIMER1_OVF_vect) {
		TCNT1 = 65535 - 16000000 / 256;
	}
snippet TimerCTC
	void TimerCTC() {
		noInterrupts();

		TCCR1A = 0; // timer/counter control register A
		TCCR1B = 0;  // timer/counter control register B
		TCCR1B |= (1 << CS12) | (1 << WGM12);
		TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B); // timer interrupt mask register
		OCR1A = 16000000 / 256;
		OCR1B = 16000000 / 256 / 2;

		interrupts();
	}

	ISR(TIMER1_COMPA_vect) {
		// timer event
	}

	ISR(TIMER1_COMPB_vect) {
		// timer event
	}
snippet TimerPWM
	void TimerPWM() {
		noInterrupts();

		TCCR1A = 0;  // timer/counter control register A
		TCCR1B = 0;  // timer/counter control register B
		TCCR1B |= (1 << CS10) | (1 << WGM12) | (1 << WGM10) | (1 << WGM13);
		TCCR1B |= (1 << COM1A1) | (1 << COM1B1);
		TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);  // timer interrupt mask register
		OCR1A = 1;
		ICR1A = 128;

		interrupts();
	}
