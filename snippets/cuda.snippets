extends cpp

snippet cuda_include
	#include <cuda.h>
	#include <cuda_runtime_api.h>
	#include <cassert>
	${0}
snippet cuda_kernel
	extern "C" __global__ ${1:void} ${2:kernel_name}(${3}) {
		${4:// kernel code...}
	}
snippet cuda_assert_error
	cudaError_t error = cudaDeviceSynchronize();
	if (error == cudaErrorAssert) {
		std::cerr << "ERROR: ${1:Device assert failed} | " << cudaGetErrorString(error)
				<< '\n';
		${0}
	}
snippet cuda_shared
	__shared__ ${1:double} tdata[1024];${2}
snippet cuda_shared_external
	extern __shared__ ${1:double} tdata[];${2}
snippet cuda_function_device
	__device__ ${1:void} ${2:kernel_name}(${3}) {
		${4:// kernel code...}
	}
snippet cuda_function_host
	__host__ ${1:void} ${2:host_function}(${3}) {
		${4:// host code...}
	}
snippet cuda_sync_threads
	__syncthreads();
	${0}
snippet cuda_index_block
	threadIdx.${1:x}
snippet cuda_index_thread
	blockIdx.${1:x}
snippet cuda_check
	int num_devices = 0;
	cudaGetDeviceCount(&num_devices);
	if (num_devices == 0) {
		${1:// error message}
		return -1;
	}
snippet cuda_device_info
	int device_count = 0;
	cudaGetDeviceCount(&device_count);
	if (device_count == 0) {
		std::cerr << "ERROR: no cuda device found\n";
		${0}
	}
	for (int i = 0; i < device_count; ++i) {
		cudaDeviceProp prop;
		cudaGetDeviceProperties(&prop, i);
		std::cout << "Device number: " << i << '\n'
				<< "\tDevice name: " << prop.name << '\n'
				<< "\tMemory Clock Rate (KHz): " << prop.memoryClockRate << '\n'
				<< "\tMemory Bus Width (bits): " << prop.memoryBusWidth << '\n'
				<< "\tPeak Memory Bandwidth (GB/s): "
				<< 2.0 * prop.memoryClockRate * (prop.memoryBusWidth / 8) / 1.0e6
				<< '\n';
	}
snippet cuda_timer
	cudaEvent_t ${1:start}, ${2:end};
	cudaEventCreate(&$1);
	cudaEventCreate(&$2);

	cudaEventRecord($1, 0);
	${0:// kernel to time}
	cudaEventRecord($2, 0);
	cudaEventSynchronize($2);
	float ${3:elapsed_time} = 0;
	cudaEventElapsedTime(&$3, $1, $2);
snippet cuda_malloc
	cudaMalloc(${1:&d_data}, sizeof(${2:float}) * ${3:1});${0}
snippet cuda_free
	cudaFree(${1:nullptr});${0}
snippet cuda_check_macro
	void ${1:CudaErrorHandle}(cudaError_t error) {
		if (error != cudaSuccess) {
			${0:throw new std::exception();}
		}
	}

	#define ${2:CUDA_EXCEPTION_IF_ERROR}(err) $1(err);
