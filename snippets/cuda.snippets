extends cpp

snippet global
	__global__ ${1:void} ${2:kernel_name}(${3}) {
		${4:// kernel code...}
	}
snippet shared
	__shared__ ${1:double} tdata[1024];${2}
snippet eshared
	extern __shared__ ${1:double} tdata[];${2}
snippet device
	__device__ ${1:void} ${2:kernel_name}(${3}) {
		${4:// kernel code...}
	}
snippet host
	__host__ ${1:void} ${2:host_function}(${3}) {
		${4:// host code...}
	}
snippet sync
	__syncthreads();
	${1}
snippet thr
	threadIdx.${1:x}
snippet blc
	blockIdx.${1:x}
snippet cuda check
	int num_devices = 0;
	cudaGetDeviceCount(&num_devices);
	if (num_devices == 0) {
		${1:// error message}
		return -1;
	}
snippet cuda info
	int num_devices = 0;
	cudaGetDeviceCount(&num_devices);
	for (int i = 0; i < num_devices; ++i) {
		cudaDeviceProp prop;
		cudaGetDeviceProperties(&prop, i);
		printf("Device Number: %d\n", i);
		printf("  Device name: %s\n", prop.name);
		printf("  Memory Clock Rate (KHz): %d\n",
			prop.memoryClockRate);
		printf("  Memory Bus Width (bits): %d\n",
			prop.memoryBusWidth);
		printf("  Peak Memory Bandwidth (GB/s): %f\n\n",
			2.0*prop.memoryClockRate*(prop.memoryBusWidth/8)/1.0e6);
	}
snippet cuda timer
	cudaEvent_t start, end;
	cudaEventCreate(&start);
	cudaEventCreate(&end);

	cudaEventRecord(start, 0);
	${1:// kernel to time}
	cudaEventRecord(end, 0);
	cudaEventSynchronize(end);
	float elapsed_time = 0;
	cudaEventElapsedTime(&elapsed_time, start, end);
snippet malloc
	cudaMalloc(${1:&d_data}, ${2:sizeof(h_data[0]) * datasize});${3}
snippet free
	cudaFree(${1:0});${2}
